Version 3.18.4:
==============
- Stability and performance improvements

Version 3.18.3:
==============
- Stability and performance improvements

Version 3.18.2:
==============
- Stability and performance improvements

Version 3.18.1:
==============
- Stability and performance improvements

Version 3.18.0:
==============
- Improved 'Session::subscribe' and 'Session::resubscribe' interface
	The current 'Session::subscribe' and 'Session::resubscribe' throw an
	exception when one of the subscriptions is invalid, e.g., subscribe
	with a duplicate 'CorrelationId'. A new set of overloads are added
	with parameter `SubscriptionPreprocessMode`, which could be
	- 'e_failOnFirstError': an exception is thrown on the first
	  invalid subscription in the 'SubscriptionList', and the entire
	  batch will be considered failed.
	- 'e_returnIndividualErrors': instead of throwing exceptions, a
	  list of 'SubscriptionPreprocessError' is returned, each
	  representing an error due to an invalid subscription in the
	  'SubscriptionList'. The valid subscriptions will move forward.

- Stability and performance improvements

Version 3.17.1:
==============
- Stability and performance improvements

Version 3.17.0:
==============
- Revamped examples
	The 'examples' directory now contains 'demoapps' and 'unittests'
	subdirectories. The 'demoapps' directory contains a consolidated set of
	example applications. Within 'demoapps', the 'snippets' directory contains
	sample code for creating and sending requests, and for processing
	responses. Also within 'demoapps', the 'util' directory contains common
	code shared between examples. The 'unittests' directory contains sample
	code for using the mock testing interface.

- Stability and performance improvements

Version 3.16.8:
==============
- Add 'Names' class
	There is now a new utility class called 'Names' that defines static
	'Name' instances for common message types. C++17 or later users can
	use the static 'Name' constants defined in 'Names', e.g.,
	'Names::SessionStarted', other users must use the static functions
	instead, e.g., 'Names::sessionStarted()'.

- Stability and performance improvements

Version 3.16.7:
==============
- Stability and performance improvements

Version 3.16.6:
==============
- Change default value for 'setServiceCheckTimeout'
	The default timeout for the service check has been increased
	to 2 minutes, making it consistent with the service download
	timeouts.  Only the default value has changed, applications
	providing their own timeout values are not affected.

- Stability and performance improvements

Version 3.16.5:
==============
- Stability and performance improvements

Version 3.16.4:
==============
- Stability and performance improvements

Version 3.16.3:
==============
- Stability and performance improvements

Version 3.16.2:
==============

Version 3.16.1.193:
===================
- Stability and performance improvements

Version 3.16.1:
==============
- Stability and performance improvements

Version 3.16.0:
==============
- Added unique request id to network interactions
	A new, globally unique, request id has been added to all network
	interactions.  The request id is a string ('const char*') that can be
	obtained by calling 'Request::getRequestId()' before sending a request, and
	'Message::getRequestId()' for messages delivered to the application.

	Not all requests and messages will have a request id, notably subscription
	data messages will *not* have a request id except for recaps.

	This unique identifier will be useful when contacting support as it will
	help quickly locate the interactions related to that event.

- Attributes are no longer supported in 'ResolutionList'
	Support for attributes during resolution was never fully implemented
	and is now deprecated.

- Default connection options changed to auto reconnect 3 times
	Default values in 'SessionOptions' have been changed to automatically
	reconnect and retry 3 times for each configured endpoint.  This change
	simplifies the use of the recommended settings.  Applications that
	don't want to reconnect can disable auto restart or change the
	number of attempts manually.

- Stability and performance improvements

Version 3.15.1:
==============
- Deprecated 'Session::createAdminEvent()'
   Clients should use 'Service::createPublishEvent()'

- Stability and performance improvements

Version 3.15.0:
==============
- Provided a simplified interface to handle authentication and authorization
	- Simplified authentication settings through the new set of strongly-typed
	  overloads described with 'AuthOptions' class.

	- Simplified existing multi-phased approach to authorization so that both
	  token generation and authorization can be done by the SDK.
		- If 'AuthOptions' instance is provided to the session through the
		  newly introduced 'setSessionIdentityOptions' (part of'SessionOptions'),
		  both token generation and subsequent authorization will be done by the
		  SDK. Successfully authorized identity would become the default
		  identity for the session that's used for all future requests unless
		  a different one is specified explicitly.

		- Additionally, two new session methods that simplify creation of
		  additional identities have been introduced:
		  	- 'generateAuthorizedIdentity' - generates authorized identity
			  based on the provided 'AuthOptions'.
		- 'getAuthorizedIdentity' - returns authorized identity that's
		  associated with the 'generateAuthorizedIdentity' call.

- Improved usage of network bandwidth through support for compression

- 'Message::topicName()' is now deprecated

- Stability and performance improvements

Version 3.14.7:
==============
- Stability and performance improvements

Version 3.14.6:
==============
- Stability and performance improvements

Version 3.14.5:
==============
- Stability and performance improvements

Version 3.14.4:
==============
- Stability and performance improvements

Version 3.14.3:
==============
- Stability and performance improvements

Version 3.14.2:
==============
- Stability and performance improvements

Version 3.14.1:
==============
- Provide users ability to unit test applications offline using testing frameworks
	The new utility class 'TestUtil' can be used to create test events and
	test messages. The test messages can be generated using XML, JSON
	or they can be built in a similar way to how messages are normally
	constructed in the SDK.

- Allow applications to obtain the response from an operation by name
	A new overload `Operation::responseDefinition(Name)` is provided to select
	the response by name instead of using the position in the schema.
	Note that the position in the schema is still relevant to the wire encoding
	and cannot be changed arbitrarily.

- Stability and performance improvements

Version 3.14.0:
==============
- Improved usage of network bandwidth for snapshot requests
    Optimized the network bandwidth usage between endpoints and Bloomberg data
    centers for snapshot requests. Customers can request to disable the
    optimization by setting the 'bandwidthSaveModeDisabled' session option.

- Stability and performance improvements

Version 3.13.2:
===============
- Stability and performance improvements

Version 3.13.1:
===============
- Stability and performance improvements

Version 3.13.0:
===============
- Automated network configuration for ZFP over leased lines
    Allow customers that leverage leased lines/routers for Bloomberg
    services (such as existing Bloomberg terminals) to use this infrastructure
    to connect their applications to Zero Foot-Print (ZFP) instances.

    A new utility class, 'ZfpUtil', can be used to
    create a 'SessionOptions' object with the appropriate servers.
    Applications can update the options, including authorization settings,
    but should not change the servers.

    Added a new example, 'ZfpOverLeasedLinesSessionExample'
    to demonstrate how to create a session over ZFP leased lines.

- Stability and performance improvements

Version 3.12.3:
===============

- Stability and performance improvements

Version 3.12.2:
===============
- Stability and performance improvements

Version 3.12.1:
===============
- Stability and performance improvements

Version 3.12.0:
===============
- Added new 'encryptionStatus' field to SessionConnectionUp message
	Added new 'encryptionStatus' field to SessionConnectionUp message with possible
	values "Clear", "Verified" and "Encrypted". When the connection is encrypted,
	the new 'encryptionCipher' field will contain the cipher in use in the connection.

- Provided printing for 'SessionOptions'
	'SessionOptions' can now be printed by an application by either calling
	'print' or using 'operator<<'.

- Added support for 'authId', replacing 'emrsId', in 'AuthorizationRequests'
	Added support for using the more general 'authId' field as a replacement for
	the 'emrsId' field in 'AuthorizationRequest' messages (//blp/apiauth service).
	The SDK will now translate 'emrsId' into 'authId' internally when only the
	former is present in the message.

- Documentation change
	Clarify meaning of integer priorities in 'ProviderSession'. Greater values indicate
	higher priorities.


- Added log rollover functionality. By default, when file logging is enabled,
	the files will be rolledover to limit the amount of logs on the system. The
	default number of logged files is 10, and the default log file size limit
	is 10 MiB. It is possible to change the rollover options using
	BLPAPI_LOGFILELIMIT to rollover when the current log exceeds the given
	limit (in MiB) and BLPAPI_LOGFILECOUNT to specify the maximum number of
	logs that blpapi keeps. Rollover can be disabled by setting non-positive
	numbers to one of these options. The rolled logs will be in the format
	<log_name>.<n>.log or <logname>.<n> depending on the BLPAPI_LOGFILE option.

- 'blpapi::Message::getPrivateData()' has been deprecated.

- Support waiting for events to be published to the network
	When provider sessions are stopped in synchronous mode, they will now wait
	for a configurable amount of time for any queued published events to be
	delivered to the network. The duration can be configured with
	'flushPublishedEventsTimeout' in session options and defaults to two seconds.

	A new method 'flushPublishedEvents' in provider session allows the
	application to wait for published events that may be queued to be delivered,
	providing confirmation. This method does not force session termination.

	Users are encouraged to configure the timeout in session options
	rather than calling 'flushPublishedEvents' manually.

- Support for service entity IDs to identify API services

- Stability and performance improvements

Version 3.11.7:
===============
- Stability and performance improvements

Version 3.11.6:
===============
- Consistent range for datetime on self-describing schemas.
	Datetime values outside of the range 1970-01-01 to 2038-01-19 in services
	with a flat schema were interpreted inconsistently by 32 and 64bit SDKs.
	All SDKs now use the extended range 1970-01-01 to 2106-02-07.

- Improved handling of failure conditions for subscriptions
	Subscriptions are now more resilient to network and infrastructure issues.
	The SDK will now recover internally from failures that previously
	terminated subscriptions.

	The SDK will consider all connections before delivering service
	notifications.  'ServiceDown' will be delivered only when no connection has
	the service available, 'ServiceUp' will be delivered when at least one
	connection has the service.  The 'endpoint' field will not be filled in for
	subscription services.

	Delivery of 'SubscriptionStreamsDeactivated' is correctly aligned with the
	instant at which data becomes unavailable, and will be followed by
	'SubscriptionStreamsActivated' once the subscription recovers.

	Applications should use 'SubscriptionStreamsDeactivated' and
	'SubscriptionStreamsActivated' events to identify subscriptions undergoing
	failover.

- Stability and performance improvements

Version 3.11.5:
===============
- Stability and performance improvements

Version 3.11.4:
===============
- Microsecond publishing support for services with non-flat schemas
	Added support for publising Time and Datetime fields with microsecond
	resolution for services using non-flat schemas.  Services with flat schemas
	can publish Datetime with millisecond resolution and Time with second
	resolution.

	To publish Time or Datetime with microsecond resolution, applications will
	need to use 'EventFormatter::setElement' and 'EventFormatter::appendValue'
	functions with the result of calling the 'highPrecisionValue()' member
	function on an existing 'Datetime' object.

- Stability and performance improvements

Version 3.11.3:
===============
- Complete microsecond support
	Complete support for microsecond precision in all wire formats.  This
	release adds support for decoding microseconds in Time and Datetime fields
	using BER encoding (most services like //blp/mktdepth) and fixes a bug by
	which microseconds were lost when decoding high precision times in
	self-describing events (//blp/mktdata).

- Stability and performance improvements

Version 3.11.2:
===============
- Added support for generation of tokens with user provided userId and IP
	When using 'AuthorizationMode=USER_AND_APPLICATION' in 'SessionOptions',
	the application can now use 'AuthorizationType=MANUAL' to provide the user
	id and IP address in the 'generateTokenRequest'.

- Improve documentation for Datetime FRACSECONDS accessors
	Clarified return value of the Datetime accessors 'milliseconds',
	'microseconds', 'nanoseconds', and 'picoseconds'.

- Stability and performance improvements

Version 3.11.1:
===============
- Provide error information in RequestFailure messages for snapshot requests
	When a RequestTemplate is terminated due to an error, the error
	information will also appear in RequestFailure messages for any
	outstanding snapshot requests using that template.

- Stability and performance improvements

Version 3.11.0:
===============
- Added SSL support for connections.
	Applications can create a 'TlsOptions' object and configure it in the
	'SessionOptions' to connect to SSL enabled endpoints using Bloomberg issued
	credentials.

Version 3.10.14:
================
- Stability and performance improvements

Version 3.10.13:
================
- Stability and performance improvements

Version 3.10.12:
================
- Improve subscription termination behavior
	Prior versions of the v3.9 and v3.10 SDK had introduced a
	regression where an active subscription would be terminated if the
	connection carrying its data was terminated and there were no other
	connections available for that topic. This regression is now fixed:
	the subscription will not be terminated as long as there are
	connection attempts pending (per settings given in SessionOptions).

- Stability and performance improvements

Version 3.10.11:
================
- Documentation change
	Clarify the contract for 'blpapi::Name' based value setters of the
	'blpapi::Element' class. 'Name' is allowed to refer only to enumeration
	and constant types, otherwise an exception will be thrown.

- Publisher topic lifetime changes
	Changed topic lifetime semantics. Calling 'deleteTopic*' on a subscribed
	topic no longer delivers 'TopicUnsubscribed' to the application as this
	caused an inconsistency between the state in the application and the
	back-end.  A subscribed topic that is deleted is now in the same state as
	a topic that was subscribed and never created.

- Stability and performance improvements

Version 3.10.10:
================
- Stability and performance improvements

Version 3.10.9:
===============
- Documentation change
	Added clarifications on topic creation and subscriptions for broadcast
	publishers.

- Stability and performance improvements

Version 3.10.8:
===============
- Enable publishers to send fragmented recap messages
	Allow publishers to send recap messages split into multiple fragments and
	further, these messages may use a non-default 'messageType'. Additional
	overloads have been provided for 'EventFormatter::appendRecapMessage' which
	allow the client to specify 'Message::Fragment' and 'messageType'
	arguments.

- Stability and performance improvements

Version 3.10.7:
===============
- Documentation fix for 'blpapi::MessageIterator::next()'
	The documentation for 'blpapi::MessageIterator::next()' now correctly
	states that the return value is a boolean indicating success or failure

- Stability improvements

Version 3.10.6:
===============
- Stability improvements

Version 3.10.5:
===============
- Publisher terminated subscriptions
	A publisher can proactively terminate subscriptions by calling
	'blpapi::ProviderSession::terminateSubscriptionsOnTopics'

- Extend admin schema for subscription and cluster management
	The admin schema has been extended to provide clients with additional
	detail about operations related to the horizontal scaling support added to
	the SDK since version 3.9. This includes both subscription and cluster
	management.
	- 'SubscriptionStarted' message is extended to include a list of unique ids
	  for data sets that have been resolved successfully for a subscription, a
	  reason why this message is delivered and the last hop from which a
	  response containing the resolved data sets was received.
	- 'SubscriptionStreamActivated' message is added. This is delivered when a
	  data set of a subscription has been successfully opened. Data associated
	  with this data set will start ticking afterwards. The message includes a
	  list of data sets that become activated and a reason for the activation.
	- 'SubscriptionStreamDeactivated' message is added. This is delivered when
	  the SDK loses its connectivity to the end point providing an active data
	  set. Data associated with this data set will stop ticking afterwards. The
	  message includes a list of data sets that become deactivated and a reason
	  for the deactivation.
	- 'SessionClusterInfo' message is added. This is delivered when the SDK is
	  connected to a cluster and receives initial cluster configuration
	  information from the Bloomberg infrastructure. The message includes the
	  name of the cluster and a list of end points within.
	- 'SessionClusterUpdate' message is added. This is delivered when the SDK
	  is connected to a cluster and receives updated configuration information
	  about the cluster from the Bloomberg infrastructure. The message includes
	  the name of the cluster and lists of end points that have been
	  added/removed.

	Apart from these subscription/cluster management specific changes, several
	existing message have also been extended:
	- 'SlowConsumerWarningCleared' message is extended to include the number of
	  events dropped since the last 'SlowConsumerWarning' message was received.
	- 'TopicUnsubscribed', 'TopicDeactivated', 'TopicDeleted' and
	  'TopicResubscribed' messages are all extended to include a reason why the
	  message is being delivered.
	- 'TopicRecap' is extended to include information about whether this is a
	  solicited recap.
	- 'SessionStarted' is extended to include a list of end points that have
	  been successfully connected when this message is delivered.
	- 'ServiceAvailabilityInfo' is extended to include the end points that were
	  successfully connected at the time the message was queued for delivery.

- Stability improvements

Version 3.10.4:
===============
- Service open timeouts configurable via 'blpapi::SessionOptions'
	The SDK supports configurable timeouts for requests sent when a service is
	opened. Clients can use 'SessionOptions::setServiceCheckTimeout()' to
	configure the timeout for identifying the version information for the
	service schema, and 'SessionOptions::setServiceDownloadTimeout()' to
	configure the timeout for downloading the service schema.

- BLPAPI resolvers can emit subscription exceptions
	Where the admin schema version supports it, it is now possible to set the
	'exceptions' field of a 'topicPermissions' element within a
	'PermissionResponse' in order to communicate rejection of certain aspects
	of a resolution/permission request, without implying failure of that
	request.  A single 'topicPermissions' element can include arbitrarily many
	exceptions, and exceptions need not concern distinct fields (or concern a
	field at all).  Subscribers will receive the subscription exceptions in the
	'exceptions' field of their 'SubscriptionStarted' message.

- Stability and performance improvements

Version 3.10.3:
===============
- Expose recap metadata in 'blpapi::Message'
	Some subscription data messages represent not real-time data, but rather
	"context" for future ticks; these messages are delivered to subscribers as
	needed (eg. when subscriptions are started, or when the infrastructure
	detects a gap in the tick stream) and thus might not be delivered at the
	same point in the tick stream for two independent subscribers to the same
	data. These *recap* messages (aka "initial paints") have previously been
	identified only in service-specific ways--e.g. recaps for the
	'//blp/mktdata' service contain a 'MKTDATA_EVENT_TYPE' field set to
	'SUMMARY'. There is now an additional interface for examining the
	recap type of a subscription data message directly:
	'blpapi::Message::recapType'

- Deliver request template status messages in events with event type 'ADMIN'

- Stability and performance improvements

Version 3.10.2:
===============
- Stability improvements

Version 3.10.1:
===============
- Request template status update messages ('RequestTemplateAvailable',
	'RequestTemplatePending', 'RequestTemplateTerminated') are delivered
	in 'ServiceStatus' event instead of 'SubscriptionStatus' event.
	The 'boundTo' field of the 'RequestTemplateAvailable' message
	specifies the connection used for receiving data about that template.

- Stability improvements

Version 3.10.0:
===============
- Snapshot requests for subscription services
	The SDK supports receiving up-to-date data on an on-demand basis
	from subscription services using a new type of request known as a
	snapshot request. This type of request enables the receipt of
	up-to-date data with significantly lower latency compared to
	starting a new subscription each time. In addition, it helps to
	avoid the overhead of the alternate approach which is to maintain
	a long-running subscription used to update a local cache.
	The data is obtained using a request-response style interaction.
	The snapshot is first set up using the new method
	'Session::createSnapshotRequestTemplate' which returns a request
	template handle represented by the new 'RequestTemplate' class.
	Whenever a subscription data snapshot is required, the
	request template can be sent using 'Session::sendRequest' and the
	corresponding data is received in a regular response. New admin
	events 'RequestTemplateAvailable', 'RequestTemplatePending',
	'RequestTemplateTerminated' provide feedback on changes to the
	state of an active request template.

- Stability improvements

Version 3.9.5:
==============
- Stability improvements

Version 3.9.4:
==============
- Stability improvements

Version 3.9.3:
==============
- Session::stop() fixed to block until final event dispatch is complete
	In previous versions of the library, the Session::stop() method failed to
	live up to its contract in certain circumstances, returning before the
	final event had been dispatched. This has been fixed.

- Stability improvements

Version 3.9.2:
==============
- Delay session startup and authorization success notifications
	For sessions where multiple server addresses are specified in the session
	parameters, the SESSION_STATUS message indicating a successful startup may
	not be delivered upon the first successful connection, but it may wait
	until additional connections are established. Similarly, authorization
	success is no longer delivered upon the first connection authorization, but
	may wait until additional connections are authorized. This enables better
	load balancing and routing when clustered connections are in use.

- Stability improvements

Version 3.9.1:
==============
- Warnings about invalid date-time fields received from network
	In prior versions of the SDK, certain malformed data for date-time fields
	within data ticks received from the network could cause crashes or
	undefined behavior. The library will now emit messages at logging level
	WARN if malformed fields are received, and such fields will be ignored.

- Multi-cluster support in C++ SDK
	The SDK may use multiple clusters of Points of Presence, and will attempt
	to route preferentially based on the order of appearance, in the session
	options, of the first Point of Presence in a given cluster.

- Stability improvements

Version 3.9.0:
==============
- Automatic cluster management
	Given a single cluster backend, the SDK will automatically manage the
	Point of Presences (POPs) within it. This includes the initial discovery of
	available POPs and the management of dynamically added/removed POPs.

- Multiple data streams for a single subscribed topic
	The SDK may potentially connect to more than one Point of Presence (POPs)
	in a cluster backend to receive data from multiple streams simultaneously
	for a single subscribed topic. Rebalance request from the backend will also
	be handled by moving existing data streams to new POPs in the same cluster.

- Improved behavior when authorizing multi-connection sessions
	For sessions with multiple connections, a single authorization
	request will now consistently authorize all connections. (In
	prior releases, some authorization modes would require
	multiple authorizations for multiple connections.) To support
	legacy applications that may send multiple (now redundant)
	authorization requests, when authorization succeeds, all the
	redundant authorization requests submitted for the same
	identity will also receive an authorization success
	message. That identity will remain authorized until the
	authorization is revoked, or the client code cancels all
	authorization requests submitted for that identity. An
	identity that fails authorization or gets deauthorized due
	to authorization revocation, or cancellation of all prior
	authorization requests can be reauthorized by sending new
	authorization requests.

- Updated DDM version needed for token based authorization
	Token-based authorization using DDM (aka "Platform") versions
	prior to 3.16.0.0 is no longer supported.

- Stability improvements

Version 3.8.7:
==============
- Stability improvements

Version 3.8.6:
==============
- ServiceDown and ServiceUp messages now include connection information
	ServiceDown and ServiceUp messages now include an 'endpoint' field that
	contains the hostname and port number of the relevant connection.

- Stability improvements

Version 3.8.5:
==============
- Stability improvements

Version 3.8.4:
==============
	The public headers now compile without warnings as both C and C++ with the
	following: GCC with '-Wall -Wextra', Clang with '-Wall -Wextra', Solaris
	Studio 12 with '+w +w2', and Microsoft CL 15 with '/W4'.

- Stability improvements

Version 3.8.3:
==============
- Stability improvements

Version 3.8.2:
==============
- Compiler warning for clients of 'blpapi_correlationid.h' fixed
	A compiler warning caused by some uses of the smart pointer interfaces in
	'blpapi_correlationid.h' has been eliminated.

- Stability improvements

Version 3.8.1:
==============
- Record receipt time for messages
	The SDK now provides an interface, 'blpapi::Message::timeReceived' for
	interrogating the time at which a message was received and processed by
	the library. In conjunction with the new 'blpapi_highprecisionclock'
	component and 'blpapi_timepoint' interfaces, this provides the facility
	for clients to measure the amount of time each message spends in the
	client event queue. For performance reasons, receipt times are *not*
	recorded for subscription data messages by default; clients can use the
	'SessionOptions::recordSubscriptionDataReceiveTimes' setting to request
	receipt times for all messages.

- External include guards for standard library removed
	Prior versions of the SDK headers used preprocessor macros to avoid multiple
	inclusion of standard library headers. Because the names of these macros
	could cause conflicts with macros in client code, that (small) optimization
	to compilation speed has been removed.

- Send host identification information during session establishment
	In order to support usage auditing, BLPAPI will report the host name and
	IP address (non-NAT) used for establishing the session with the Bloomberg
	infrastructure.

- Stability improvements

Version 3.8.0:
==============
- Service-level failover
	When a session has multiple connections and a service becomes unavailable
	on one connection (and a 'ServiceDown' message is added to the event
	queue) outstanding requests and subscriptions for that service (only) will
	now be automatically migrated to a connection where the service is
	available (and a 'ServiceUp' message will be added to the event queue), if
	such a connection exists. Note that this can result in a single session
	using multiple connections simultaneously for different services.

- Additional information in 'ServiceUp' and 'ServiceDown' messages
	The 'ServiceUp' and 'ServiceDown' messages have been extended with
	detailed information about which parts of the service have become
	(un)available.

- Authorization token uses display IP address when a remote display is in use
	When a blpapi application is being executed in a Citrix
	(XenApp/XenDesktop) environment, the 'Session::generateToken'
	function now uses the "display IP address" to identify where the
	application is running, instead of using the physical IP address
	as reported by the operating system. This enables applications
	using BPS permissioning to be run remotely (even in virtual
	environments) as long as they are using the same display as a
	Bloomberg terminal. This feature supports only a single level of
	remoting: if an application is running on machine A which has a
	remote display on machine B and machine B has a remote display on
	machine C, 'Session::generateToken' will generate a token for
	authorization on machine B.

- Addition of testing interface for logging system
	A 'blpapi::Logging::logTestMessage' function has been added to allow
	clients to test the library's logging configuration, and the functionality
	of registered logging callbacks.

- Extended version identifier interfaces
	The library now offers 'VersionInfo::headerVersion()' and
	'VersionInfo::runtimeVersion()` interfaces to allow client applications to
	separately report which version of the library they were compiled against,
	and which version of the library was actually loaded using symmetric
	interfaces. (Previously, clients were forced to read header macros directly
	to detect header versions.) Further, the 'VersionInfo::versionIdentifier()'
	interface has been added, to allow more fine-grained release tracking
	information for Bloomberg support.

- Stability improvements

Version 3.7.6:
==============
- Stability improvements

Version 3.7.5:
==============
- Stability improvements

Version 3.7.4:
==============
- Stability improvements

Version 3.7.3:
==============
- Stability improvements

Version 3.7.2:
==============
- Stability improvements

Version 3.7.1:
==============
- Stability improvements

Version 3.7.0:
==============
- Publisher topic resolution
	Services can be configured such that when a provider creates new topics via
	'ProviderSession:createTopics' using a topic string, that topic string will
	first be sent to a resolver for resolution. Note that topics created via
	'TopicSubscribed' and 'ResolutionResult' messages (instead of topic strings)
	will not undergo resolution.

- Providers can delete topics
	The new 'ProviderSession::deleteTopic*' interfaces allow publishers to
	free the resources associated with topics created using
	'ProviderSession::createTopic*'. See 'blpapi_providersession' for details.

- Support service deregistration
	Providers can now de-register services. When a registered service is
	de-registered, all topics are deleted, all subscriptions and pending
	requests are cancelled (and routed by the infrastructure to other providers,
	if available), and a ServiceStatus event containing a ServiceDeregistered
	message is delivered to the provider. When a service whose registration is
	pending is deregistered, the registration is cancelled and a ServiceStatus
	event containing a ServiceRegisterFailure message is delivered to the
	provider.

- Add sub-service code support
	Publishers can now collaborate with resolvers to route subscription
	requests based on "sub-service codes", which are integer identifiers
	between 0 and 2**24. Publishers can advertise the set of sub-service
	codes they support (and their priority relative to other publishers for
	each sub-service code) either at the time the service is registered
	(via 'ServiceRegistrationOptions::addSubServiceCodeRange') or
	dynamically over the lifetime of the publisher (via
	'ProviderSession::activateSubServiceCodeRange' and
	'ProviderSession::deactivateSubServiceCodeRange'). In responding to a
	resolution request, a resolver can set the 'subServiceCode' element of
	the 'PermissionResponse', and the subscription request will be routed
	only to a publisher that has advertised that particular sub-service
	code.

- Support pub-sub contribution services
	This SDK supports contribution services that have been configured to use the
	publication protocol for each contributed tick. Existing services (that
	use the request-response protocol for contributed ticks) are unaffected.

- Fine-grained service registration
	Support is provided for separate registration of the publication,
	operations (request-response), and resolution components of a service.
	This provides to ability to, for example, write a publisher and its
	corresponding resolver as entirely separate applications running in
	different processes (and different machines). See
	'ProviderSession::RegistrationParts' and
	'ServiceRegistrationOptions::setPartsToRegister' for further details.

- Report errors when attempting to publish the same field multiple times
	The documentation for 'EventFormatter' has always specified undefined
	behavior if clients attempt to set the same field in a tick multiple
	times. Previous versions of the library would silently allow such usage
	(with unspecified semantics for which value would be published).
	'EventFormatter' will now detect and report most instances of this type
	of misuse.

- Diagnostics for unrepresentable date-times
	The date-time fields specified by some services and schemas permit only
	date-time values that occurred after '1970/01/01T00:00:00.000'. Misuse
	of such fields has been made easier to detect within publishers.

- 'blpapi::FieldNotFoundException' has been deprecated
	The 'blpapi::FieldNotFoundException' class has been deprecated and users are
	expected to catch the more generic 'blpapi::NotFoundException'.

- Drop support for V2 platform
	The SDK no longer supports publishing to Platform versions before 3.0.0.

- New connection strategy when multiple hosts are provided
	The SDK now initiates connections to all provided hosts when a session is
	started, instead of waiting for loss of the primary connection to connect
	to another host for failover.

- 'blpapi::EventHandler' destructor is now virtual
	Instances of 'blpapi::EventHandler' subclasses can now be safely destroyed
	via base class pointers.

- Stability improvements

Version 3.6.7:
==============
- Stability improvements

Version 3.6.5:
==============
- Stability improvements

Version 3.6.4:
==============
- Topic strings can be marked as not requiring resolution
	Clients with access to fully-resolved topic strings can now use the
	'SubscriptionList::addResolved' family of functions to advise the
	Bloomberg infrastructure that such topics do not require resolution. It
	is at the discretion of the infrastructure whether or not such advice
	actually allows avoidance of the resolution phase of subscription.

- New interface to access diagnostics information on the blpapi library
	A new 'DiagnosticsUtil::memoryInfo' function is exposed to provide access
	to platform-specific memory diagnostics.  The format of the information
	provided by this call is currently unspecified and is intended for internal
	use only.

- New session option to disable keep-alive mechanism
	Clients can now use the 'SessionOptions::setKeepAliveEnabled' function
	to disable or enable a session's keep-alive mechanism.  In addition,
	the 'SessionOptions::keepAliveEnabled' function can be used to query
	the enabled state of the keep-alive mechanism.

Version 3.6.3:
==============
- Linux library memory model optimization
	Prior versions of the Linux library were built using the static TLS
	memory model; this version now uses the dynamic TLS memory model.

- RedistributeWithAuthExample added
	A new example has been added to demonstrate how to write an application
	to redistribute data based on authorization information.

- Stability improvements

Version 3.6.2:
==============
- Publishers can clear internal cached values
	This version adds support to allow publishers to publish null values
	by calling 'EventFormatter::setElementNull'. Publishing null clears any
	value for that field currently cached by the data distribution
	platform.

- Stability improvements

Version 3.6.1:
==============
- Stability improvements

Version 3.6.0:
==============
- 'Name' ordering and hashing
	The comparator for 'Name', the SDK's wrapper around constant strings,
	has been significantly optimized, and the interface has been extended
	with additional comparators and hashing support. The contract for
	'operator<(const Name&, const Name&)' has always warned that the
	ordering used does not necessarily correspond with any typical string
	ordering (e.g.  that used by 'strcmp'), and that the actual ordering
	used may vary from process to process. Prior SDK versions did, in fact,
	use the same ordering as 'strcmp', however that is no longer the case.

- Demonstrate a valid behavior on DataLoss
	Sample implementation of application processing DataLoss message added
	to SubscriptionWithEventHandlerExample. Note that this behavior may not
	be the most appropriate behavior for your application.

- Timezone fields no longer automatically filled
	Clients of services which published datetime fields with no time zone
	information previously received those fields with the time zone set to
	UTC; this behavior has been disabled. Publishers continue to have time
	zone set to UTC for data they send if no time zone is present, although
	this behavior is deprecated and publishers are encouraged to explicitly
	set the time zones of published dates, times, and datetimes to UTC.

- SecurityLookupExample added
	A new example has been added to demonstrate the use of the ticker
	lookup service, '//blp/instruments'.

- Resubscribe with resubscription ID
	One more method in Session is provided to support resubscription with
	a user-specified resubscription ID. This resubscription ID appears in
	the subscription status messages('SubscriptionStarted' and
	'SubscriptionFailure') associated with this resubscription request,
	differentiating them from status messages for other resubsubscriptions
	and from status messages from the initial subscription.

- Clarification of Datetime documentation
	Guarantees about the parts set by various functions have been provided.
	The semantics of comparator functions have also been clarified.

- Additional Datetime convenience functions
	A full set of 'create*' named constructors have been added. These should
	eliminate the need for users to set individual parts of a Datetime object,
	reducing the chance of misuse.

- Datetime no longer considers 24:00:00 a valid time
	Prior library versions provided limited functionality for values with time
	24:00:00.0; that time is now considered invalid as reported by
	'Datetime::isValidTime'.

- Stability improvements

Version 3.5.2:
==============
- Stability improvements

Version 3.5.1:
==============
- Stability improvements

Version 3.5.0:
==============
- High-precision time
	The blpapi::Datetime type has been extended with support for
	receiving high-precision fractional seconds, with accessors for the
	fraction-of-second as milliseconds, microseconds, nanoseconds, and
	picoseconds, with these accessors ignoring/truncating higher-resolution
	parts as necessary. The C interface has been similarly extended with a
	new struct carrying picosecond-resolution data. High-precision times
	can be retrieved from blpapi_Element_t objects using the C interface
	by replacing calls to blpapi_Element_*Datetime with calls to
	blpapi_Element_*HighPrecisionDatetime. The C++ interface handles
	high-precision temporal types transparently.

- Datetime comparison functions updated
	Previous versions of the datetime comparison functions provided defined
	behavior only for full date-times (with all parts set). Datetime
	comparisons are now provided for any two datetime values, although the
	actual ordering for incompatible datetimes is unspecified. This may
	alter comparison results for clients relying on the previously
	unsupported behavior.

- Setting Datetime blpapi::Element objects respects schema
	When assigning the value of a blpapi::Element with a schema type of
	Date or Time, only those parts relevant to the schema type are stored.

- blpapi::Element conversions between Datetime and string
	Reading and assigning a blpapi::Element with a date, time, or
	datetime schema type as a string has been updated to work consistently
	across the types and without loss of information (which should now
	allow round-tripping). In cases where the previous behavior was
	technically undefined (including dates with time zone offset
	information) the string format may be different than in previous
	versions.

- Datetime print method
	The C/C++ printing methods for Datetime types have been changed to use
	iso8601 format (as used by the blpapi::Element conversions between
	strings and Datetime objects, and by the Java and C# versions of
	BLPAPI). This also eliminates issues related to printing negative time
	zone offsets.

- Added variety of new constructors for class Datetime
	A variety of new constructors are now available for creating a Datetime
	object from different combination of the Datetime parts.

- Change default SessionOptions maxEventQueueSize
	Changed the default value of maxEventQueueSize in SessionOptions to
	10000 as previously documented.

- Removing the class InvalidConverstionException
	Affected users should use InvalidConversionException instead of
	InvalidConverstionException.

- Deliver DataLoss when library drops events
	The library drops events when the number of events outstanding for
	delivery exceeds the specified threshold controlled by SessionOptions
	maxEventQueueSize.

	A new ADMIN message of type DataLoss will be delivered to notify the
	client about lost data. The correlationID property attached to the
	DataLoss message identifies the affected subscription.

- Stability improvements

Version 3.4.8:
==============
- Stability improvements

Version 3.4.7:
==============
- Stability improvements

Version 3.4.6:
==============
- Support fragmented messages
	Users can call Message::fragmentType() to determine if a message is a
	fragment of a larger message. Most messages won't be fragmented so the
	above method will return FRAGMENT_NONE. Consuming application should be
	prepared to receive a FRAGMENT_START before receiving FRAGMENT_END
	in which case previously received message fragments (start and any
	intermediate fragments) should be discarded.

- Per-connection authorization implemented inside the library
	Applications are no longer required to send an authorization request
	per each backend they intend to use. This functionality is now provided
	by the library.

- Introduce new dead peer detection mechanism
	The new functionality is controlled by two parameters: inactivity time
	and response timeout. Inactivity time controls the amount of time
	without any read activity on the connection before the library will ping
	the peer. The peer will be declared "dead" if ping response (or other
	data) is not received within response timeout interval after the ping.
	The behaviour can be controlled using following SessionOption
	properties:
	        DefaultKeepAliveInactivityTime
	        DefaultKeepAliveResponseTimeout
	This feature is only available if connected to a compatible server.

- Limit un-bounded memory growth for slow consuming applications
	Users can now limit the number of events that blpapi can hold before
	applications accept these incoming events (maxEventQueueSize).
	The library will drop subsequent events received over the network if
	it already has the specified 'maxEventQueueSize' number of events
	outstanding for delivery.

	Added two new message types to AdminEvents event type:
	SlowConsumerWarning and SlowConsumerWarningCleared.

	The library will generate 'SlowConsumerWarning' message when the
	pending events reach 'close' to specified maxEventQueueSize. A
	SlowConsumerWarningCleared notification will be sent to the
	application when the count of pending events drops 'sufficiently
	lower' than the specified 'maxEventQueueSize'.

	The behaviour can be controlled using following methods of
	SessionOptions class:
	        setMaxEventQueueSize(size_t)
	        setSlowConsumerWarningHiWaterMark(float)
	        setSlowConsumerWarningLoWaterMark(float)

- Rename class InvalidConverstionException to InvalidConversionException
	A compatibility fix is currently in place, so old code won't break
	right away, but affected users should make the change as soon as
	possible.

- PagePublisherExample now supports Permission Requests.

- ContributionsPageExample can publish on user specified topic
	In ContributionsPageExample, users can specify the topic to publish
	using the "-t" option at command line.

- Stability improvements

Version 3.4.5:
==============
- Support multiple simultaneous active connections to backend servers
	ProviderSession.registerService request will announce published
	services through all connected backends. A new SERVICE_STATUS message
	was introduced: ServiceAvailabilityInfo to inform the publishing
	application about the current list of backends that carry their
	service.

	Applications will be required to send an authorization request per
	each backend they intend to use (it's recommended to send as many as
	the number of configured backends)

- Support publishing request/response services
	Publishing applications can now register to publish interactive
	services: requests from clients will be routed to such publishers, who
	would create a response with Service.createResponseEvent() and send it
	back with ProviderSession.sendResponse(). Included
	RequestServiceExample demonstrates an implementation of both client
	and server applications.

- Support user-provided sequence numbers
	The presence of sequence numbers in published events will enable a
	seamless (data loss free) failover in case of a publisher loss.

	EventFormatter was extended with new overloads for appendMessage() and
	appendRecapMessage() which take a sequence number as one of the
	arguments where added to allow publishers insert sequence numbers into
	message they publish.

- Expose more EMRS information to users
	Added userName, appName, serviceName and deviceAddress to permission
	request.

- Topic-level permissioning
	Publishers can report the list of EIDs and the permissioning service
	information per Topic in PermissionResponse (in a response to
	PermissionRequest sent by Platform on behalf of a subscriber). The
	Platform will continuously monitor entitlements of that subscriber to
	ensure eligibility to receive the data on the Topic. In case the
	permissions of the subscriber make him ineligible, the Platform will
	terminate that subscription.

- New interface header file blpapi_sessionoptions.h
	blpapi::SessionOptions class moved into a separate header file -
	blpapi_sessionoptions.h. This change is expected to be completely
	transparent for all users.

- Stability improvements

Version 3.4.4:
==============
- Restart bbcomm if necessary in failover
	This change corrects a regression introduced in 3.4.0: now bbcomm.exe
	task will be started (if it's down) before attempting to connect to
	its port on every connection attempt, not just once on startup

- Stability improvements

Version 3.4.3:
==============
- Simplify configuration of "DefaultTopicPrefix" session option
	The library will be more flexible accepting values for
	"DefaultTopicPrefix" stripping and adding leading and trailing '/'
	symbols as necessary

- Connection timeout configurable via SessionOptions
	The default connection timout changed to be 5 sec. Users can change
	that value using SessionOptions::setConnectTimeout().

- Stability improvements

Version 3.4.2:
==============
- Stability release

Version 3.4.1:
==============
- Support concurrent openService & registerService operations
	Multiple ProviderSession::openService() & ProviderSession::registerService()
	operations can run concurrently. Either if started explicitly or
	implicitly via ProviderSession::resolve(), ProviderSession::createTopics(),
	and Session::subscribe() calls.

- More detailed error messages
	Report more detailed information in many more error cases.

- Differentiate log messages based on session id in the log file
	When a single process has more than one active session, log messages coming
	from different sessions are tagged with the session id.

- Added comparison operators and << operator support to Datetime type
	The type Datetime now support all comparison operators: ==, !=, <, <=, >,
	and >=. Also, support for operator<< was added, as well as the function
	Datetime::print.

- ProviderSession::getTopic does not throw on TopicSubscribed/TopicUnsubscribed
	ProviderSession::getTopic(const Message&) does not throw an
	InvalidArgumentException anymore if the Message::messageType() is
	TopicSubscribed or TopicUnsubscribed. This is not considered as an error
	case anymore since it is a valid state that a provider will receive an
	event for TopicSubscribed/TopicUnsubscribed for a topic that does not yet
	exist in the provider session.

- InvalidArgumentException was thrown instead of InvalidStateException
	In some cases of accessing the Session object while it was in an invalid
	state, BLPAPI incorrectly threw InvalidArgumentException instead of
	InvalidStateException.

- Unused ExceptionUtil::ExceptionClass enum removed
	The enum ExceptionUtil::ExceptionClass is not used, thus it was removed
	from the API.

- More accurate ResolutionList::Status enum
	Now ProviderSession::resolve and ProviderSession::resolveAsync sets a more
	accurate Status enum value for each entry in the ResolutionList.

Version 3.4.0:
==============
- All new ProviderSession, independent from Session:
	Initial publishing implementation offered ProviderSession which was a
	subclass of Session. Thus it was possible to do subscriptions on
	ProviderSession. It's no longer the case: ProviderSession and Session
	are no longer related; new classes provide a true "writer" and "reader"
	interfaces respectively. New session classes share a common base -
	AbstractSession, which defines interfaces for session control, and
	user authorization.

- Multiple publisher support:
	Multiple publishers for the same feed/topic are now supported, providing
	redundancy/fan-in services.
	- Publisher group ID: When registering a service you now can specify
	  a group ID. If not specified, each provider session will have a
	  unique group ID (default behavior). The group ID is used for
	  clustering together a set of service publishers.
	  The group ID controls the behavior of the multiple publishers. Using
	  the same group ID for a set of publishers you can provide redundancy
	  between the publishers. Using a different group IDs users can
	  implement publisher fan-in (for the same or different topics).

	- Redundancy: When publishers are registered with the same group ID, the
	  platform will manage the list of publishers and will activate the
	  feed from only one of them at any given time.
	  In order to support this feature two new TOPIC_STATUS messages exist:
	  TopicActivated & TopicDeactivated.
	  A publisher should start publishing on a given topic only after a
	  TopicActivated message has been received. When a publisher receives
	  the TopicDeactivated notification message, it should stop publishing
	  on the topic.
	  All information that is streamed from a publisher before it received
	  the TopicActivated message, or after it received the
	  TopicDeactivated message will be discarded by the platform.
	  Publishers on the same group are required to publish identical tick
	  streams.

	- Topic fan-in: Data streams from publishers with different group IDs
	  will be combined into one stream toward the subscribers. It's up to
	  the publishers to make sure that different group IDs will not
	  publish redundant information.
	  Setting the group ID:
	  ...
	  ServiceRegistrationOptions options;
	  char *groupID = "SomeGroupID";
	  options.setGroupId(groupID, strlen(groupID));
	  providerSession.registerService(serviceName, identity, options);
	  ...

	- The binary interface (C)
	  blpapi_ProviderSession_registerService[Async] has changed. The
	  source interface (C++) has not changed but requires recompilation.

- Failover support for both publisher- and subscriber-type clients
	A session can be provided with a list of platform servers. Depending
	on the session configuration, if the platform server goes down the
	session will try to reconnect to the next platform server in the list.
	By default, the auto restart option is disabled, to enable it do:
	...
	SessionOptions options;
	options.setAutoRestartOnDisconnection(true);
	ProviderSession session(options, &myEventHandler, 0);
	...

	Users should expect that sometimes (the worst case scenario) the
	library might not be able to failover some published services or topics
	to the backup system and will notify the user with
	ServiceFailoverError and TopicFailoverError messages as appropriate.

- Topic creation/resolution:
	The API blpapi_ProviderSession_createTopic/ProviderSession::createTopic
	has been deprecated.

	Topic resolution and management has moved from the library to the
	platform server, thus each time the library is trying to resolve or
	create a topic a message is sent to the platform. In order to save in
	bandwidth and response time the new API supports creation of multiple
	topics in a single call.

	Once a topic has been created it is cached by the library (in the
	process memory). In order to get a reference to a cached instance
	using a message object, the API blpapi_ProviderSession_getTopic/ProviderSession::getTopic
	was introduced.

	In order to maintain backward compatibility, the deprecated API
	createTopic can still be used, but it assumes that the topic object
	was previously resolved & created using either createTopics API. In
	"compat33x" mode it's sufficient to call
	ProviderSession::resolve[Async] which does both resolving and topic
	creation with the platform. As a result, the createTopic API is now a
	local call (i.e. the library does not interact with the platform).

	When creating a topic using either createTopics API or
	resolve/createTopics API, the library generates the following events
	to the client in case of a successful operation:
	- RESOLUTION_STATUS event with ResolutionSuccess message
	- TOPIC_STATUS event with TopicCreated and TopicActivated (or
	  TopicDeactivated, if the provider was not elected primary for the
	  group) messages.

- Topic recap:
	A topic recap message, is a message generated by the client
	application and should include ALL the current information for the
	topic (the platform cache will get reset to whatever values came in
	the recap message, empty fields will clear cache values; that's
	different from a regular tick where absent field values mean "no
	change"). There are two logical types of a topic recap message:

	- Solicited topic recap message: The platform server can decide that
	  the information it has stored in cache is not valid anymore, in that
	  case the publisher will receive a TOPIC_STATUS event with TopicRecap
	  message. The message will include a correlation ID that should be
	  incorporated into the Topic recap response.
	...
	Topic topic = session->getTopic(msg);
	CorrelationId cid = msg.correlationId();
	Event event = service.createPublishEvent();
	EventFormatter eventFormatter(event);
	eventFormatter.appendRecapMessage(topic, &cid);
	...

	- Unsolicited topic recap message:
	  The client application can decide on its own (based on its own
	  internal logic) to send a recap message to the platform. Sending a
	  topic recap message is done the same way as sending a regular update
	  message, with two changes: When appending a message to the event,
	  you should use the appendRecapMessage method (vs the appendMessage)
	  of the EventFormatter and, all fields of the topic recap message
	  should be filled. The code fragment below demonstrates sending a
	  recap message:
	...
	Event event = service.createPublishEvent();
	EventFormatter eventFormatter(event);
	eventFormatter.appendRecapMessage(topic, 0);
	...

- Initial paint events:
	Publishing applications implementing "initial paint" functionality
	must do that by sending a recap message as descibed above; formatting
	these events with EventFormatter::appendMessage() is not supported. The
	recap will be requested by the platform if the service's metadata
	specifies that publishers supports recaps (see discussion on solicited
	topic recap messages above). Otherwise publishers can provide the
	"initial paint" by sending an unsolicited recap of the topic in
	response to TopicActivated notification.

- dynamically updating entitlements in Identity
	Authorization request no longer completes when Identity is authorized,
	AuthorizationSuccess message will arrive in a PARTIAL_RESPONSE event.
	The authorization request will remain outstanding delivering
	entitlements updates.

- full 64-bit OS support on Windows/Linux/SunOS
	We'll distribute blpapi libraries built for 64-bit operating
	environment.  BBCOMM will be autostarted in DAPI mode from 64-bit
	Java/C# applications on Windows platform with assistance of native
	64-bit library blpdapisup_64.dll.

- Identity extended to include user's "seat" type
	An authorized Identity object can detail whether the authenticated
	user is a BLP Professional Service user or not.

- PermissionRequest extended to support non-user subscribers
	PermissionRequest message have been extended to supply "seat" type
	information of the subscriber and application ID (if subscriber used
	application authentication).

- support custom loggers
	BLPAPI now supports logging through customer-provided logging callback.

- connection up/down notifications
	Added two new message types to SessionStatus event type:
	SessionConnectionUp and SessionConnectionDown. This way the lifetime
	of the connection to the backend server and the lifetime of the
	session can be reported independently as connections to backend can
	drop/recover without having the library terminate the session.

- removal of blpapi_sessionparameters.h
	blpapi_sessionparameters.h is being removed. All the uses related to
	SessionParameters or blpapi_SessionParamaters_* are to be switched with
	SessionOptions or blpapi_SessionOptions_* in blpapi_abstractsession.h.

- CorrelationId constructors marked "explicit"
	The following two CorrelationId constructors have been marked
	"explicit" to prevent their unexpected use in implicit type
	conversions (see ISO/IEC 14882-2003: Programming Languages -- C++,
	Second Edition, 2003, Section 12.3.1, "Conversion by constructor").
	Such implicit conversions may be unexpected, and lead to undesirable
	behavior.
	- CorrelationId::CorrelationId(long long, int = 0)
	- CorrelationId::CorrelationId(void *, int = 0)

Version 3.3.11:
===============
- Identity extended to include user's "seat" type
	An authorized Identity object can detail whether the authenticated
	user is a BLP Professional Service user or not.
